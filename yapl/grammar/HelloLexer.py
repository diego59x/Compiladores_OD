# Generated from ./Hello.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,298,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,90,8,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,108,8,1,1,2,
        1,2,5,2,112,8,2,10,2,12,2,115,9,2,1,2,1,2,1,3,4,3,120,8,3,11,3,12,
        3,121,1,4,1,4,1,4,1,4,3,4,128,8,4,1,5,1,5,1,5,1,5,3,5,134,8,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,144,8,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,156,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
        8,166,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,176,8,9,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,184,8,10,1,11,1,11,1,11,1,11,3,11,190,8,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,200,8,12,1,13,1,
        13,1,13,1,13,1,13,1,13,3,13,208,8,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,222,8,14,1,15,1,15,1,15,1,
        15,1,15,1,15,3,15,230,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
        34,1,35,1,35,1,36,1,36,5,36,283,8,36,10,36,12,36,286,9,36,1,37,1,
        37,5,37,290,8,37,10,37,12,37,293,9,37,1,38,1,38,1,38,1,38,0,0,39,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,1,0,5,1,0,48,57,1,0,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,65,90,3,0,9,10,13,13,32,32,315,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,89,1,0,0,0,3,107,1,0,0,0,5,109,
        1,0,0,0,7,119,1,0,0,0,9,127,1,0,0,0,11,133,1,0,0,0,13,143,1,0,0,
        0,15,155,1,0,0,0,17,165,1,0,0,0,19,175,1,0,0,0,21,183,1,0,0,0,23,
        189,1,0,0,0,25,199,1,0,0,0,27,207,1,0,0,0,29,221,1,0,0,0,31,229,
        1,0,0,0,33,231,1,0,0,0,35,233,1,0,0,0,37,235,1,0,0,0,39,238,1,0,
        0,0,41,240,1,0,0,0,43,242,1,0,0,0,45,247,1,0,0,0,47,253,1,0,0,0,
        49,255,1,0,0,0,51,257,1,0,0,0,53,259,1,0,0,0,55,261,1,0,0,0,57,263,
        1,0,0,0,59,265,1,0,0,0,61,267,1,0,0,0,63,270,1,0,0,0,65,272,1,0,
        0,0,67,274,1,0,0,0,69,276,1,0,0,0,71,278,1,0,0,0,73,280,1,0,0,0,
        75,287,1,0,0,0,77,294,1,0,0,0,79,80,5,99,0,0,80,81,5,108,0,0,81,
        82,5,97,0,0,82,83,5,115,0,0,83,90,5,115,0,0,84,85,5,67,0,0,85,86,
        5,76,0,0,86,87,5,65,0,0,87,88,5,83,0,0,88,90,5,83,0,0,89,79,1,0,
        0,0,89,84,1,0,0,0,90,2,1,0,0,0,91,92,5,105,0,0,92,93,5,110,0,0,93,
        94,5,104,0,0,94,95,5,101,0,0,95,96,5,114,0,0,96,97,5,105,0,0,97,
        98,5,116,0,0,98,108,5,115,0,0,99,100,5,73,0,0,100,101,5,78,0,0,101,
        102,5,72,0,0,102,103,5,69,0,0,103,104,5,82,0,0,104,105,5,73,0,0,
        105,106,5,84,0,0,106,108,5,83,0,0,107,91,1,0,0,0,107,99,1,0,0,0,
        108,4,1,0,0,0,109,113,5,34,0,0,110,112,9,0,0,0,111,110,1,0,0,0,112,
        115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,
        113,1,0,0,0,116,117,5,34,0,0,117,6,1,0,0,0,118,120,7,0,0,0,119,118,
        1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,8,1,
        0,0,0,123,124,5,105,0,0,124,128,5,102,0,0,125,126,5,73,0,0,126,128,
        5,70,0,0,127,123,1,0,0,0,127,125,1,0,0,0,128,10,1,0,0,0,129,130,
        5,102,0,0,130,134,5,105,0,0,131,132,5,70,0,0,132,134,5,73,0,0,133,
        129,1,0,0,0,133,131,1,0,0,0,134,12,1,0,0,0,135,136,5,101,0,0,136,
        137,5,108,0,0,137,138,5,115,0,0,138,144,5,101,0,0,139,140,5,69,0,
        0,140,141,5,76,0,0,141,142,5,83,0,0,142,144,5,69,0,0,143,135,1,0,
        0,0,143,139,1,0,0,0,144,14,1,0,0,0,145,146,5,119,0,0,146,147,5,104,
        0,0,147,148,5,105,0,0,148,149,5,108,0,0,149,156,5,101,0,0,150,151,
        5,87,0,0,151,152,5,72,0,0,152,153,5,73,0,0,153,154,5,76,0,0,154,
        156,5,69,0,0,155,145,1,0,0,0,155,150,1,0,0,0,156,16,1,0,0,0,157,
        158,5,108,0,0,158,159,5,111,0,0,159,160,5,111,0,0,160,166,5,112,
        0,0,161,162,5,76,0,0,162,163,5,79,0,0,163,164,5,79,0,0,164,166,5,
        80,0,0,165,157,1,0,0,0,165,161,1,0,0,0,166,18,1,0,0,0,167,168,5,
        112,0,0,168,169,5,111,0,0,169,170,5,111,0,0,170,176,5,108,0,0,171,
        172,5,80,0,0,172,173,5,79,0,0,173,174,5,79,0,0,174,176,5,76,0,0,
        175,167,1,0,0,0,175,171,1,0,0,0,176,20,1,0,0,0,177,178,5,108,0,0,
        178,179,5,101,0,0,179,184,5,116,0,0,180,181,5,76,0,0,181,182,5,69,
        0,0,182,184,5,84,0,0,183,177,1,0,0,0,183,180,1,0,0,0,184,22,1,0,
        0,0,185,186,5,105,0,0,186,190,5,110,0,0,187,188,5,73,0,0,188,190,
        5,78,0,0,189,185,1,0,0,0,189,187,1,0,0,0,190,24,1,0,0,0,191,192,
        5,116,0,0,192,193,5,104,0,0,193,194,5,101,0,0,194,200,5,110,0,0,
        195,196,5,84,0,0,196,197,5,72,0,0,197,198,5,69,0,0,198,200,5,78,
        0,0,199,191,1,0,0,0,199,195,1,0,0,0,200,26,1,0,0,0,201,202,5,110,
        0,0,202,203,5,101,0,0,203,208,5,119,0,0,204,205,5,78,0,0,205,206,
        5,69,0,0,206,208,5,87,0,0,207,201,1,0,0,0,207,204,1,0,0,0,208,28,
        1,0,0,0,209,210,5,105,0,0,210,211,5,115,0,0,211,212,5,118,0,0,212,
        213,5,111,0,0,213,214,5,105,0,0,214,222,5,100,0,0,215,216,5,73,0,
        0,216,217,5,83,0,0,217,218,5,86,0,0,218,219,5,79,0,0,219,220,5,73,
        0,0,220,222,5,68,0,0,221,209,1,0,0,0,221,215,1,0,0,0,222,30,1,0,
        0,0,223,224,5,110,0,0,224,225,5,111,0,0,225,230,5,116,0,0,226,227,
        5,78,0,0,227,228,5,79,0,0,228,230,5,84,0,0,229,223,1,0,0,0,229,226,
        1,0,0,0,230,32,1,0,0,0,231,232,5,61,0,0,232,34,1,0,0,0,233,234,5,
        60,0,0,234,36,1,0,0,0,235,236,5,60,0,0,236,237,5,61,0,0,237,38,1,
        0,0,0,238,239,5,47,0,0,239,40,1,0,0,0,240,241,5,42,0,0,241,42,1,
        0,0,0,242,243,5,116,0,0,243,244,5,114,0,0,244,245,5,117,0,0,245,
        246,5,101,0,0,246,44,1,0,0,0,247,248,5,102,0,0,248,249,5,97,0,0,
        249,250,5,108,0,0,250,251,5,115,0,0,251,252,5,101,0,0,252,46,1,0,
        0,0,253,254,5,40,0,0,254,48,1,0,0,0,255,256,5,41,0,0,256,50,1,0,
        0,0,257,258,5,123,0,0,258,52,1,0,0,0,259,260,5,125,0,0,260,54,1,
        0,0,0,261,262,5,59,0,0,262,56,1,0,0,0,263,264,5,43,0,0,264,58,1,
        0,0,0,265,266,5,45,0,0,266,60,1,0,0,0,267,268,5,60,0,0,268,269,5,
        45,0,0,269,62,1,0,0,0,270,271,5,126,0,0,271,64,1,0,0,0,272,273,5,
        58,0,0,273,66,1,0,0,0,274,275,5,44,0,0,275,68,1,0,0,0,276,277,5,
        46,0,0,277,70,1,0,0,0,278,279,5,64,0,0,279,72,1,0,0,0,280,284,7,
        1,0,0,281,283,7,2,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,
        0,0,0,284,285,1,0,0,0,285,74,1,0,0,0,286,284,1,0,0,0,287,291,7,3,
        0,0,288,290,7,2,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,
        0,0,291,292,1,0,0,0,292,76,1,0,0,0,293,291,1,0,0,0,294,295,7,4,0,
        0,295,296,1,0,0,0,296,297,6,38,0,0,297,78,1,0,0,0,19,0,89,107,113,
        121,127,133,143,155,165,175,183,189,199,207,221,229,284,291,1,6,
        0,0
    ]

class HelloLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    INHERITS = 2
    STRING = 3
    INTEGER = 4
    IF = 5
    FI = 6
    ELSE = 7
    WHILE = 8
    LOOP = 9
    POOL = 10
    LET = 11
    IN = 12
    THEN = 13
    NEW = 14
    ISVOID = 15
    NOT = 16
    EQUALS = 17
    BIGGER = 18
    BIGGEREQUALS = 19
    DIVIDE = 20
    TIMES = 21
    TRUE = 22
    FALSE = 23
    LPAREN = 24
    RPAREN = 25
    LBRACKET = 26
    RBRACKET = 27
    SEMICOLON = 28
    PLUS = 29
    MINUS = 30
    ASSIGN = 31
    TILDE = 32
    COLON = 33
    COMMA = 34
    DOT = 35
    AT = 36
    ID = 37
    TYPE = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'<'", "'<='", "'/'", "'*'", "'true'", "'false'", "'('", 
            "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'<-'", "'~'", "':'", 
            "','", "'.'", "'@'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "INHERITS", "STRING", "INTEGER", "IF", "FI", "ELSE", 
            "WHILE", "LOOP", "POOL", "LET", "IN", "THEN", "NEW", "ISVOID", 
            "NOT", "EQUALS", "BIGGER", "BIGGEREQUALS", "DIVIDE", "TIMES", 
            "TRUE", "FALSE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
            "SEMICOLON", "PLUS", "MINUS", "ASSIGN", "TILDE", "COLON", "COMMA", 
            "DOT", "AT", "ID", "TYPE", "WS" ]

    ruleNames = [ "CLASS", "INHERITS", "STRING", "INTEGER", "IF", "FI", 
                  "ELSE", "WHILE", "LOOP", "POOL", "LET", "IN", "THEN", 
                  "NEW", "ISVOID", "NOT", "EQUALS", "BIGGER", "BIGGEREQUALS", 
                  "DIVIDE", "TIMES", "TRUE", "FALSE", "LPAREN", "RPAREN", 
                  "LBRACKET", "RBRACKET", "SEMICOLON", "PLUS", "MINUS", 
                  "ASSIGN", "TILDE", "COLON", "COMMA", "DOT", "AT", "ID", 
                  "TYPE", "WS" ]

    grammarFileName = "Hello.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


